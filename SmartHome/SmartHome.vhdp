Main
(
    Button_In        : IN STD_LOGIC_VECTOR (3 downto 0);
    Button_Out       : OUT STD_LOGIC_VECTOR (1 downto 0) := "ZZ";
    
    Mic_LRCLK        : OUT STD_LOGIC;
    Mic_BCLK         : OUT STD_LOGIC;
    Mic_Data         : IN STD_LOGIC;
    
    Matrix_CS_O      : BUFFER STD_LOGIC;
    Matrix_CLK_O     : OUT STD_LOGIC;
    Matrix_DIN_O     : OUT STD_LOGIC;
    
    RTC_SDA          : INOUT STD_LOGIC := 'Z';
    RTC_SCL          : INOUT STD_LOGIC := 'Z';
    
    Mode_Switch      : IN  STD_LOGIC;
    Up_Switch        : IN  STD_LOGIC;
    
    En_Matrix_Switch : IN  STD_LOGIC;
    En_Clap_Switch   : IN  STD_LOGIC;
)
{
    CONSTANT Day_brightness_init   : INTEGER range -1 to 15 := 6; --brightness from 10 to 18
    CONSTANT Dusk_brightness_init  : INTEGER range -1 to 15 := 0; --brightness from 6 to 10 and 18 to 22
    CONSTANT Night_brightness_init : INTEGER range -1 to 15 := -1; --brightness from 22 to 6
    
    --Select scenes depending on claps, switch scene with switch input and set matrix brighness
    Process ()
    {
        VARIABLE New_Clap : BOOLEAN := true;
        
        If(New_Clap)
        {
            If(Claps = 2)        --clapped 2 times -> Set to 2. scene or turn everything off again
            {
                If(Scene > 1)    --If anyting besides the default scene is set
                {
                    Scene <= 1;  --  Set scene to default (normaly everything off)
                }
                Else             --Else
                {
                    Scene <= 2;  --  Set scene 2
                }
                
                New_Clap := false;
            }
            
            If(Claps = 3) --clapped 3 times -> switch between other scenes
            {
                If(Scene > 3)    --If scene 4 is on
                {
                    Scene <= 2;  --  set scene 2
                }
                Elsif(Scene < 2) --Else if everything is off
                {
                    Scene <= 3;  --  set scene 3
                }
                Else             --Else
                {
                    Scene <= Scene + 1; --Go to next scene
                }
                
                New_Clap := false;
            }
            
            If(Claps = 6) --When matrix enable is on, you are not in the clock settings and the increase switch is on, switch between all scenes
            {
                If(Scene < 3)
                {
                    Scene <= Scene + 1;
                }
                Else
                {
                    Scene <= 1;
                }
                New_Clap := false;
            }
            
            VARIABLE Set_brightness   : INTEGER range -1 to 15;
            VARIABLE new_setting      : BOOLEAN := false;
            VARIABLE Day_brightness   : INTEGER range -1 to 15 := Day_brightness_init; --brightness from 10 to 18
            VARIABLE Dusk_brightness  : INTEGER range -1 to 15 := Dusk_brightness_init; --brightness from 6 to 10 and 18 to 22
            VARIABLE Night_brightness : INTEGER range -1 to 15 := Night_brightness_init; --brightness from 22 to 6
            
            If(Claps = 7) --When matrix enable is off, you are not in the clock settings and the increase switch is on, set brighness of matrix
            {
                If(Set_brightness < 15)
                {
                    Set_brightness := Set_brightness + 1;
                }
                Else
                {
                    Set_brightness := 0;
                }
                new_setting := true;
                New_Clap := false;
            }
        }
        Else
        {
            If(Claps = 0)
            {
                New_Clap := true;
            }
        }
        
        If(Input_Debouncer_Outputs(2 downto 1) = "00")  --debounced En_Matrix_Switch
        {
            Set_brightness := -1;
        }
        Elsif(Clock_Hours > 21 OR Clock_Hours < 6)
        {
            If(new_setting)
            {
                Night_brightness := Set_brightness;
            }
            Set_brightness := Night_brightness;
        }
        Elsif(Clock_Hours > 9 AND Clock_Hours < 18)
        {
            If(new_setting)
            {
                Day_brightness := Set_brightness;
            }
            Set_brightness := Day_brightness;
        }
        Else
        {
            If(new_setting)
            {
                Dusk_brightness := Set_brightness;
            }
            Set_brightness := Dusk_brightness;
        }
        new_setting := false;
        Brightness <= Set_brightness;
    }
    
    ISSP_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Noise, ISSP_probe'LENGTH));
    
    SIGNAL ISSP_probe  : std_logic_vector (31 downto 0) := (others => 'X');
    NewComponent ISSP
    (
        probe  =>ISSP_probe,
    );

    SIGNAL Input_Debouncer_Outputs      : STD_LOGIC_VECTOR (4-1 downto 0) := (others => '0');
    NewComponent Input_Debouncer
    (
        Counter_Size => 19,
        Input_Number => 4,

        Inputs       => Mode_Switch & Up_Switch & En_Matrix_Switch & En_Clap_Switch,
        Outputs      => Input_Debouncer_Outputs,
    );
    
    SIGNAL  Claps     : NATURAL range 0 to 7 := 0;
    SIGNAL  Scene     : NATURAL range 1 to 4 := 1;
    SIGNAL Clock_Hours      : NATURAL          range 0 to 23 := 0;
    SIGNAL Clock_Minutes    : NATURAL          range 0 to 59 := 0;
    SIGNAL Brightness       : INTEGER          range -1 to 15 := 4;
    SIGNAL Noise            : NATURAL          range 0 to 131000 := 0;
    NewComponent SmartHome_Controller
    (
        Scene_1_Setting  => (Switch_A => false, Switch_B => false, Switch_C => false, Switch_D => false, Visualizer => false, Matrix => false),
        Scene_2_Setting  => (Switch_A => true,  Switch_B => false, Switch_C => false, Switch_D => false, Visualizer => true,  Matrix => false),
        Scene_3_Setting  => (Switch_A => false, Switch_B => false, Switch_C => false, Switch_D => false, Visualizer => false, Matrix => false),
        Scene_4_Setting  => (Switch_A => false, Switch_B => false, Switch_C => false, Switch_D => false, Visualizer => false, Matrix => false),
        Setting_Switches => true,
        Claps_for_cycle  => 6,
        Claps_for_bright => 7,

        Button_In      => Button_In,
        Button_Out     => Button_Out,
        Mic_LRCLK      => Mic_LRCLK,
        Mic_BCLK       => Mic_BCLK,
        Mic_Data       => Mic_Data,
        Matrix_CS_O    => Matrix_CS_O,
        Matrix_CLK_O   => Matrix_CLK_O,
        Matrix_DIN_O   => Matrix_DIN_O,
        RTC_SCL        => RTC_SCL,
        RTC_SDA        => RTC_SDA,
        Mode_Switch      => Input_Debouncer_Outputs(3),
        Up_Switch        => Input_Debouncer_Outputs(2),
        En_Clap_Switch   => Input_Debouncer_Outputs(0),
        En_Matrix_Switch => Input_Debouncer_Outputs(1),
        
        Scene          => Scene,
        Claps          => Claps,
        Brightness     => Brightness,
        Clock_Hours    => Clock_Hours,
        Clock_Minutes  => Clock_Minutes,
        Noise          => Noise,
    );
    
}